china_people_vaccinated = china_covid_variable$people_vaccinated,
china_people_fully_vaccinated = china_covid_variable$people_fully_vaccinated,
china_new_vaccinations_smoothed = china_covid_variable$new_vaccinations_smoothed,
china_stringency_index = china_covid_variable$stringency_index,
china_death_rate = china_covid_variable$death_rate
)
library(glmnet)
set.seed(22)
train.index = sample(x=1:nrow(china_usa_covid_variable),
size=ceiling(0.8*nrow(china_usa_covid_variable)))
train = china_usa_covid_variable[train.index, ]
test = china_usa_covid_variable[-train.index, ]
ridge = glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 0,
family = "gaussian")
lasso = glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 1,
family = "gaussian")
par(mfcol = c(1, 2))
plot(lasso, xvar='lambda', main="Lasso")
plot(ridge, xvar='lambda', main="Ridge")
#picking lambda lasso (by min MSE)
cv.lasso = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 1,  # lasso
family = "gaussian")
plot(cv.lasso)
best.lambda_lasso = cv.lasso$lambda.1se
best.lambda_lasso
#picking lambda ridge (by min MSE)
cv.ridge = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 0,  # ridge
family = "gaussian")
plot(cv.ridge)
best.lambda_ridge = cv.ridge$lambda.min
best.lambda_ridge
par(mfcol = c(1, 2))
plot(lasso, xvar='lambda', main="Lasso")
china_summary_data <- target_contry(data = world_summary, place = 'China')
china_summary_data <- china_summary_data %>% mutate(log_vix_adj_close = log(vix$Adj.Close),
.before= "location")
china_covid_variable <- china_summary_data %>% select(where(~is.numeric(.x)))
library(glmnet)
set.seed(22)
train.index = sample(x=1:nrow(china_usa_covid_variable),
size=ceiling(0.8*nrow(china_usa_covid_variable)))
train = china_usa_covid_variable[train.index, ]
test = china_usa_covid_variable[-train.index, ]
ridge = glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 0,
family = "gaussian")
lasso = glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 1,
family = "gaussian")
par(mfcol = c(1, 2))
plot(lasso, xvar='lambda', main="Lasso")
plot(ridge, xvar='lambda', main="Ridge")
#picking lambda lasso (by min MSE)
cv.lasso = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 1,  # lasso
family = "gaussian")
plot(cv.lasso)
best.lambda_lasso = cv.lasso$lambda.1se
best.lambda_lasso
#picking lambda ridge (by min MSE)
cv.ridge = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 0,  # ridge
family = "gaussian")
plot(cv.ridge)
best.lambda_ridge = cv.ridge$lambda.min
best.lambda_ridge
par(mfcol = c(1, 2))
plot(lasso, xvar='lambda', main="Lasso")
abline(v=log(best.lambda_lasso), col="blue", lty=5.5 )
plot(ridge, xvar='lambda', main="Ridge")
abline(v=log(best.lambda_ridge), col="blue", lty=5.5 )
china_summary_data <- target_contry(data = world_summary, place = 'China')
china_summary_data <- china_summary_data %>% mutate(log_vix_adj_close = log(vix$Adj.Close),
.before= "location")
china_covid_variable <- china_summary_data %>% select(where(~is.numeric(.x)))
library(glmnet)
set.seed(22)
train.index = sample(x=1:nrow(china_usa_covid_variable),
size=ceiling(0.8*nrow(china_usa_covid_variable)))
train = china_usa_covid_variable[train.index, ]
test = china_usa_covid_variable[-train.index, ]
ridge = glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 0,
family = "gaussian")
lasso = glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 1,
family = "gaussian")
par(mfcol = c(1, 2))
plot(lasso, xvar='lambda', main="Lasso")
plot(ridge, xvar='lambda', main="Ridge")
#picking lambda lasso (by min MSE)
cv.lasso = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 1,  # lasso
family = "gaussian")
par(mfcol = c(1, 2))
plot(cv.lasso)
best.lambda_lasso = cv.lasso$lambda.1se
best.lambda_lasso
#picking lambda ridge (by min MSE)
cv.ridge = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 0,  # ridge
family = "gaussian")
plot(cv.ridge)
best.lambda_ridge = cv.ridge$lambda.min
best.lambda_ridge
par(mfcol = c(1, 2))
plot(lasso, xvar='lambda', main="Lasso")
abline(v=log(best.lambda_lasso), col="blue", lty=5.5 )
plot(ridge, xvar='lambda', main="Ridge")
abline(v=log(best.lambda_ridge), col="blue", lty=5.5 )
best.lambda_ridge = cv.ridge$lambda.min
best.lambda_ridge
par(mfcol = c(1, 2))
plot(lasso, xvar='lambda', main="Lasso")
abline(v=log(best.lambda_lasso), col="blue", lty=5.5 )
plot(ridge, xvar='lambda', main="Ridge")
abline(v=log(best.lambda_ridge), col="blue", lty=5.5 )
best.lambda_ridge = cv.ridge$lambda.min
best.lambda_ridge
par(mfcol = c(1, 2))
plot(lasso, xvar='lambda', main="Lasso")
abline(v=log(best.lambda_lasso), col="blue", lty=5.5 )
plot(ridge, xvar='lambda', main="Ridge")
abline(v=log(best.lambda_ridge), col="blue", lty=5.5 )
best.lambda_ridge = cv.ridge$lambda.1se
best.lambda_ridge
par(mfcol = c(1, 2))
plot(lasso, xvar='lambda', main="Lasso")
abline(v=log(best.lambda_lasso), col="blue", lty=5.5 )
plot(ridge, xvar='lambda', main="Ridge")
abline(v=log(best.lambda_ridge), col="blue", lty=5.5 )
#picking lambda lasso (by min MSE)
cv.lasso = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 1,  # lasso
family = "gaussian")
par(mfcol = c(1, 2))
plot(cv.lasso)
best.lambda_lasso = cv.lasso$lambda.1se
best.lambda_lasso
#picking lambda ridge (by min MSE)
cv.ridge = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 0,  # ridge
family = "gaussian")
plot(cv.ridge)
#picking lambda lasso (by min MSE)
cv.lasso = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 1,  # lasso
family = "gaussian")
par(mfcol = c(1, 2))
plot(cv.lasso)
best.lambda_lasso = cv.lasso$lambda.1se
best.lambda_lasso
#picking lambda ridge (by min MSE)
cv.ridge = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 0,  # ridge
family = "gaussian")
plot(cv.ridge)
best.lambda_ridge = cv.ridge$lambda.1se
best.lambda_ridge
#picking lambda lasso (by min MSE)
cv.lasso = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 1,  # lasso
family = "gaussian")
best.lambda_lasso = cv.lasso$lambda.1se
best.lambda_lasso
#picking lambda ridge (by min MSE)
cv.ridge = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 0,  # ridge
family = "gaussian")
plot(cv.ridge)
best.lambda_ridge = cv.ridge$lambda.1se
best.lambda_ridge
#picking lambda ridge (by min MSE)
cv.ridge = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 0,  # ridge
family = "gaussian")
best.lambda_ridge = cv.ridge$lambda.1se
best.lambda_ridge
par(mfcol = c(1, 2))
plot(cv.lasso)
plot(cv.ridge)
par(mfcol = c(1, 2))
plot(lasso, xvar='lambda', main="Lasso")
abline(v=log(best.lambda_lasso), col="blue", lty=5.5 )
plot(ridge, xvar='lambda', main="Ridge")
abline(v=log(best.lambda_ridge), col="blue", lty=5.5 )
#picking lambda lasso (by min MSE)
cv.lasso = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 1,  # lasso
family = "gaussian")
par(mfcol = c(1, 2))
plot(cv.lasso)
best.lambda_lasso = cv.lasso$lambda.1se
best.lambda_lasso
#picking lambda ridge (by min MSE)
cv.ridge = cv.glmnet(x = as.matrix(train[, -1]),
y = train[, 1],
alpha = 0,  # ridge
family = "gaussian")
plot(cv.ridge)
best.lambda_ridge = cv.ridge$lambda.min
best.lambda_ridge
coef(cv.lasso, s = "lambda.1se")
select.ind_lasso <-  which(abs(coef(cv.lasso, s = "lambda.1se")) != 0)
select.ind_lasso <-  select.ind_lasso[-1]  # ignore interval
select.ind_lasso
select.varialbes_lasso = colnames(train)[select.ind_lasso]
select.varialbes_lasso
coef(cv.lasso, s = "lambda.1se")
select.ind_lasso <-  which(abs(coef(cv.lasso, s = "lambda.1se")) != 0)
select.ind_lasso <-  select.ind_lasso[-1]  # ignore interval
select.ind_lasso
select.varialbes_lasso = colnames(train)[select.ind_lasso]
select.varialbes_lasso
coef(cv.lasso, s = "lambda.1se")
select.ind_lasso <-  which(abs(coef(cv.lasso, s = "lambda.1se")) != 0)
select.ind_lasso <-  select.ind_lasso[-1]  # ignore interval
select.varialbes_lasso = colnames(train)[select.ind_lasso]
select.varialbes_lasso
#evaluate
ridge.test = predict(ridge,
s = best.lambda_ridge,
newx = as.matrix(test[, -1]))
SSE_ridge <- mean((exp(test$log_vix_adj_close) - exp(ridge.test))^2)
SST <- mean((exp(test$log_vix_adj_close) - exp(mean(test$log_vix_adj_close)))^2)
R_square_ridge <- 1 - SSE_ridge/SST
R_square_ridge
lasso.test = predict(lasso,
s = best.lambda_lasso,
newx = as.matrix(test[, -1]))
SSE_lasso <- mean((exp(test$log_vix_adj_close) - exp(lasso.test))^2)
SST <- mean((exp(test$log_vix_adj_close) - exp(mean(test$log_vix_adj_close)))^2)
R_square_lasso <- 1 - SSE_lasso/SST
R_square_lasso
library(tidyverse)
library(ggplot2)
library(patchwork)
usa_summary_data <- summary_data %>% filter(location == 'United States')
Cor <- cor(usa_summary_data$total_deaths[220:581],usa_summary_data$total_vaccinations[220:581])
cat('相關係數為',Cor)
usa_total_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_deaths),color = "blue")+  theme_bw()
usa_total_vaccinations <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_vaccinations),color = "red") + theme_bw()
(usa_total_deaths|usa_total_vaccinations)
library(tidyverse)
summary_data <- read.csv('owid-covid-data.csv') #得到有關 covid 的各個國家各項數據
vix <- read.csv('vix.csv')#在Yahoo finance 中取得 VIX 資料
summary_data <- summary_data %>% filter(date %in% vix$Date) #挑出美股有開市的日期
summary_data %>% glimpse
library(tidyverse)
library(ggplot2)
library(patchwork)
usa_summary_data <- summary_data %>% filter(location == 'United States')
Cor <- cor(usa_summary_data$total_deaths[220:581],usa_summary_data$total_vaccinations[220:581])
cat('相關係數為',Cor)
usa_total_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_deaths),color = "blue")+  theme_bw()
usa_total_vaccinations <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_vaccinations),color = "red") + theme_bw()
(usa_total_deaths|usa_total_vaccinations)
library(tidyverse)
library(ggplot2)
library(patchwork)
usa_summary_data <- summary_data %>% filter(location == 'United States')
Cor <- cor(usa_summary_data$total_deaths[220:581],usa_summary_data$total_vaccinations[220:581])
cat('相關係數為',Cor)
usa_total_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_deaths),color = "blue")+  theme_bw()
usa_total_vaccinations <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_vaccinations),color = "red") + theme_bw()
(usa_total_deaths|usa_total_vaccinations)
usa_summary_data <- summary_data %>% filter(location == 'United States')
Cor <- cor(usa_summary_data$total_deaths[220:581],usa_summary_data$total_vaccinations[220:581])
cat('累計資料相關係數為',Cor)
usa_total_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_deaths),color = "blue")+  theme_bw()
usa_total_vaccinations <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_vaccinations),color = "red") + theme_bw()
(usa_total_deaths|usa_total_vaccinations)
Cor <- cor(usa_summary_data$new_deaths[220:581],usa_summary_data$new_vaccinations[220:581])
cat('差分處理後的相關係數為',Cor)
usa_new_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = new_deaths),color = "black") +
geom_vline(xintercept = 250,size = 1,color ="red")+
geom_vline(xintercept = 350,size = 1,color ="red")+
theme_bw()
usa_new_vaccination <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = new_vaccinations),color = "black") +
geom_vline(xintercept = 250,size = 1,color ="red")+
geom_vline(xintercept = 350,size = 1,color ="red")+
theme_bw()
(usa_new_deaths|usa_new_vaccination)
usa_total_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_deaths),color = "blue")+  theme_bw()
usa_total_vaccinations <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_vaccinations),color = "red") + theme_bw()
(usa_total_deaths|usa_total_vaccinations)
usa_total_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_deaths),color = "blue",xlab = index)+  theme_bw()
usa_total_vaccinations <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_vaccinations),color = "red") + theme_bw()
usa_total_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_deaths),color = "blue",xlab = 'index')+  theme_bw()
usa_total_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_deaths),color = "blue") +
labs(x = "index") + theme_bw()
usa_total_vaccinations <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_vaccinations),color = "red") + theme_bw()
(usa_total_deaths|usa_total_vaccinations)
usa_total_vaccinations <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_vaccinations),color = "red")+
labs(x = "index") + theme_bw()
(usa_total_deaths|usa_total_vaccinations)
usa_new_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = new_deaths),color = "black") +
labs(x = "index")
geom_vline(xintercept = 250,size = 1,color ="red")+
geom_vline(xintercept = 350,size = 1,color ="red")+
theme_bw()
usa_new_vaccination <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = new_vaccinations),color = "black") +
labs(x = "index")
usa_new_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = new_deaths),color = "black") +
labs(x = "index")+
geom_vline(xintercept = 250,size = 1,color ="red")+
geom_vline(xintercept = 350,size = 1,color ="red")+
theme_bw()
usa_new_vaccination <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = new_vaccinations),color = "black") +
labs(x = "index")+
geom_vline(xintercept = 250,size = 1,color ="red")+
geom_vline(xintercept = 350,size = 1,color ="red")+
theme_bw()
(usa_new_deaths|usa_new_vaccination)
library(tidyverse)
library(ggplot2)
library(patchwork)
usa_summary_data <- summary_data %>% filter(location == 'United States')
Cor <- cor(usa_summary_data$total_deaths[220:581],usa_summary_data$total_vaccinations[220:581])
cat('累計資料相關係數為',Cor)
usa_total_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_deaths),color = "blue") +
labs(x = "index") + theme_bw()
usa_total_vaccinations <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = total_vaccinations),color = "red")+
labs(x = "index") + theme_bw()
(usa_total_deaths|usa_total_vaccinations)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
summary_data <- read.csv('owid-covid-data.csv') #得到有關 covid 的各個國家各項數據
vix <- read.csv('vix.csv')#在Yahoo finance 中取得 VIX 資料
summary_data <- summary_data %>% filter(date %in% vix$Date) #挑出美股有開市的日期
summary_data %>% glimpse
Cor <- cor(usa_summary_data$new_deaths[220:581],usa_summary_data$new_vaccinations[220:581])
cat('差分處理後的相關係數為',Cor)
usa_new_deaths <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = new_deaths),color = "black") +
labs(x = "index")+
geom_vline(xintercept = 250,size = 1,color ="red")+
geom_vline(xintercept = 350,size = 1,color ="red")+
theme_bw()
usa_new_vaccination <- usa_summary_data %>% ggplot(aes(x = 1:581)) + geom_line(aes(y = new_vaccinations),color = "black") +
labs(x = "index")+
geom_vline(xintercept = 250,size = 1,color ="red")+
geom_vline(xintercept = 350,size = 1,color ="red")+
theme_bw()
(usa_new_deaths|usa_new_vaccination)
head(world_summary_cleaned_policy)
world_summary_cleaned_policy[is.na(world_summary_cleaned_policy)] <- 0
head(world_summary_cleaned_policy)
library(rio)
#save our cleaned data as "world_summary_cleaned_policy.csv".
export(world_summary_cleaned_policy, "world_summary_cleaned_policy.csv")
export(vix, "vix.csv")
head(world_summary_cleaned_policy) #資料前處理後的dataset
head(world_summary_cleaned_policy) #資料前處理後的dataset
head(world_summary_cleaned_policy[,18:22]) #資料前處理後的dataset
head(world_summary_cleaned_policy[,18:22]) #資料前處理後的dataset
library(tidyverse)
summary_data <- read.csv('owid-covid-data.csv')
vix <- read.csv('vix.csv')
summary_data <- summary_data %>% filter(date %in% vix$Date) #挑出美股有開市的日期
summary_data %>% glimpse
#pick the data with no replicated and the number of NAN is acceptable
world_summary_cleaned <- summary_data %>% transmute(location,
continent,
date,
new_cases_smoothed,
new_deaths_smoothed,
reproduction_rate,
new_tests_smoothed,
positive_rate,
tests_per_case,
people_vaccinated,
people_fully_vaccinated,
new_vaccinations_smoothed,
total_deaths,
total_cases,
stringency_index,
population,
population_density,
)
time_line <- function(start,end,data){
cut(as.Date(data$date),c(as.Date('2020-01-01'),as.Date(start),as.Date(end),as.Date('2022-07-05')),c(0,1,0))
}
c_time_line <- function(start1,end1,start2,end2,data){
cut(as.Date(data$date),c(as.Date('2020-01-01'),as.Date(start1),as.Date(end1),as.Date(start2),as.Date(end2),as.Date('2022-07-05')),c(0,1,0,1,0))
}
#input statistic and policy
world_summary_cleaned_policy <- world_summary_cleaned %>% mutate(death_rate = total_deaths/total_cases,
new_york_lockdown = time_line(start = '2020-03-22', end = '2020-05-15', world_summary_cleaned),
California_lockdown = time_line(start = '2020-03-19', end = '2020-05-17', world_summary_cleaned),
China_factory_shutdown = c_time_line(start1 = '2020-01-18', end1 = '2020-02-14', start2 = '2022-03-28',end2 = '2022-06-01', world_summary_cleaned),
federal_rate_cut = time_line(start = '2020-03-15', end = '2020-05-07', world_summary_cleaned))
world_summary_cleaned_policy[is.na(world_summary_cleaned_policy)] <- 0
world_summary_cleaned_policy %>% tidy
world_summary_cleaned_policy %>% tidy
library(broom)
world_summary_cleaned_policy %>% tidy
world_summary_cleaned_policy %>% as.tibble
world_summary_cleaned_policy %>% as_tibble
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
summary_data <- read.csv('owid-covid-data.csv') #得到有關 covid 的各個國家各項數據
vix <- read.csv('vix.csv')#在Yahoo finance 中取得 VIX 資料
summary_data <- summary_data %>% filter(date %in% vix$Date) #挑出美股有開市的日期
summary_data %>% as_tibble
world_summ <- read.csv("world_summary_cleaned_policy.csv")
raw_vix <- read.csv("vix.csv")
suppressMessages(library("psych"))
suppressMessages(library("car"))
america_summary_data <- subset(world_summ,world_summ$location == 'United States')
usa_std <- scale(america_summary_data[4:24])
world_summ <- read.csv("world_summary_cleaned.csv")
raw_vix <- read.csv("vix.csv")
suppressMessages(library("psych"))
suppressMessages(library("car"))
america_summary_data <- subset(world_summ,world_summ$location == 'United States')
usa_std <- scale(america_summary_data[4:24])
usa_std <- subset(usa_std[,-c(19,20)])
View(world_summ)
usa_std <- scale(america_summary_data[4:24])
View(usa_std)
world_summ <- read.csv("world_summary_cleaned.csv")
raw_vix <- read.csv("vix.csv")
suppressMessages(library("psych"))
suppressMessages(library("car"))
america_summary_data <- subset(world_summ,world_summ$location == 'United States')
usa_std <- scale(america_summary_data[4:24])
usa_std <- subset(usa_std[,-c(19,20)])
colnames(usa_std) <- c("total_cases_usa",	"new_cases_usa", "new_cases_smoothed_usa", "total_deaths_usa",
"new_deaths_usa",	"new_deaths_smoothed_usa", "reproduction_rate_usa",
"total_tests_usa", "new_tests_usa", "new_tests_smoothed_usa",	"positive_rate_usa",
"tests_per_case_usa",	"total_vaccinations_usa",	"people_vaccinated_usa",
"people_fully_vaccinated_usa", "new_vaccinations_usa","new_vaccinations_smoothed_usa",
"stringency_index_usa",	"death_rate_usa")
usa_dummy <- america_summary_data[25:28]
View(america_summary_data)
(3*4.3+3*4+3*4.3+3*4.3+3*4.3+3*3.3)/21
(3*4.3+3*4.3+3*4+3*4.3+3*4.3+3*4.3+3*3.3)/21
(3*4.3+3*4.3+3*4+3*4.3+3*4.3+3*4.3+3*4.3)/21
(3*4.3+3*4.3+3*4+3*4.3+3*4.3+3*4.3+3*4)/21
(3*4.3+3*4.3+3*4+3*4.3+3*4.3+3*4.3+3*4)/21
(3*4.3+3*4.3+3*4+3*4.3+3*4.3+3*4.3+3*4.3)/21
pnorm(-1.677)
library(tidyverse)
summary_data <- read.csv('owid-covid-data.csv')
vix <- read.csv('vix.csv')
summary_data <- summary_data %>% filter(date %in% vix$Date) #挑出美股有開市的日期
summary_data %>% glimpse
#pick the data with no replicated and the number of NAN is acceptable
world_summary_cleaned <- summary_data %>% transmute(location,
continent,
date,
new_cases_smoothed,
new_deaths_smoothed,
reproduction_rate,
new_tests_smoothed,
positive_rate,
tests_per_case,
people_vaccinated,
people_fully_vaccinated,
new_vaccinations_smoothed,
total_deaths,
total_cases,
stringency_index,
population,
population_density,
)
time_line <- function(start,end,data){
cut(as.Date(data$date),c(as.Date('2020-01-01'),as.Date(start),as.Date(end),as.Date('2022-07-05')),c(0,1,0))
}
c_time_line <- function(start1,end1,start2,end2,data){
cut(as.Date(data$date),c(as.Date('2020-01-01'),as.Date(start1),as.Date(end1),as.Date(start2),as.Date(end2),as.Date('2022-07-05')),c(0,1,0,1,0))
}
#input statistic and policy
world_summary_cleaned_policy <- world_summary_cleaned %>% mutate(death_rate = total_deaths/total_cases,
new_york_lockdown = time_line(start = '2020-03-22', end = '2020-05-15', world_summary_cleaned),
California_lockdown = time_line(start = '2020-03-19', end = '2020-05-17', world_summary_cleaned),
China_factory_shutdown = c_time_line(start1 = '2020-01-18', end1 = '2020-02-14', start2 = '2022-03-28',end2 = '2022-06-01', world_summary_cleaned),
federal_rate_cut = time_line(start = '2020-03-15', end = '2020-05-07', world_summary_cleaned))
world_summary_cleaned_policy[is.na(world_summary_cleaned_policy)] <- 0
world_summary_cleaned_policy %>% as_tibble
library(tidyverse)
library(ggplot2)
library(patchwork)
install.packages(patchwork)
install.packages('patchwork')
library(ggplot2)
library(patchwork)
usa_summary_data <- summary_data %>% filter(location == 'United States')
